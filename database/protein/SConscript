"""
Build HMMs from corresponding Multiple Sequence Alignments.
"""
#------------------------------------------------------------------------------
#Create or load dictionary for corresponding multiple sequence alignment paths
dict_pickle = os.path.join(database_env['SRCDIR'], 'msa_source_paths.p')
#Command(dict_pickle, database_env['DBFILE'], 'python3 %s/msa_path_dict.py --input $SOURCE --output $TARGET --search_dir %s --extension %s' % (os.getcwd(), database_env['MSACURDIR'], 'FASTA'))
msa_path_dict = {}
if os.path.exists(dict_pickle) and os.path.getsize(dict_pickle) > 0:
    print('msa path dictionary exists, loading pickle object %s...' % dict_pickle)
    msa_paths_dict = pickle.load( open( dict_pickle, 'rb' ) )
else:
    msa_paths_dict = build_path_dict(file_table = database_env['DBFILE'], search_dirs = [database_env['MSACURDIR']], ext = 'FASTA')
    pickle_dump(pickle_out = dict_pickle, object = msa_paths_dict)
#------------------------------------------------------------------------------
#Options for hmmbuild
hmmbuild_opts = {'--cpu':2, '--seed':42}

#File containing paths to built HMM profiles
hmm_pathfile = open(os.path.join(database_env['SRCDIR'], 'hmm_paths.txt'), 'w')
#File containing paths to combined MSAs
msa_pathfile = open(os.path.join(database_env['SRCDIR'], 'msa_paths.txt'), 'w')

#Create merged alignments from curated MSAs and build HMM profiles
for k, v in msa_paths_dict.items():
    v = [i for i in v if i != 'NA']
    if v:
        k = k.replace('\"', '')
        hmm_out = os.path.join(database_env['HMMDIR'], '%s.hmm' % k)
        hmmbuild_opts['-n'] = k
        hmmbuild_optstring = ' '.join([str(key) + ' ' + str(value) for key, value in hmmbuild_opts.items()])
        hmmbuild_action = 'hmmbuild %s $TARGET $SOURCE' % hmmbuild_optstring

        if len(v) == 1:
            ali_fasta_uniq = os.path.join(database_env['ALIGNDIR'], '%s.fasta' % k)
            ali_stock_uniq = os.path.splitext(ali_fasta_uniq)[0] + '.stockholm'

            database_env.FastaUniq(ali_fasta_uniq, v[0])
            database_env.MSAFormat(ali_stock_uniq, ali_fasta_uniq)
            database_env.Command(hmm_out, ali_stock_uniq, hmmbuild_action)

            hmm_pathfile.write(os.path.abspath(hmm_out) + '\n')
            msa_pathfile.write(os.path.abspath(ali_fasta_uniq) + '\n' + os.path.abspath(ali_stock_uniq) + '\n')

        elif len(v) == 2:
            #Merge the two multiple sequence alignments
            ali_fasta_tmp = os.path.join(database_env['TMPDIR'], '%s.fasta' % k)
            ali_fasta_uniq = os.path.join(database_env['ALIGNDIR'], os.path.basename(ali_fasta_tmp))
            ali_stock_uniq = os.path.splitext(ali_fasta_uniq)[0] + '.stockholm'

            database_env.MafftAdd(ali_fasta_tmp, v)
            database_env.FastaUniq(ali_fasta_uniq, ali_fasta_tmp)
            database_env.MSAFormat(ali_stock_uniq, ali_fasta_uniq)
            database_env.Command(hmm_out, ali_stock_uniq, hmmbuild_action)

            hmm_pathfile.write(os.path.abspath(hmm_out) + '\n')
            msa_pathfile.write(os.path.abspath(ali_fasta_uniq) + '\n' + os.path.abspath(ali_stock_uniq) + '\n')

        else:
            #If 3+ multiple sequence alignments, iteratively merge them
            ali_init = os.path.join(database_env['TMPDIR'], '%s_v%d.fasta' % (k, 1))
            database_env.MafftAdd(ali_init, [v[0], v[1]])
            ali_fasta_tmp = str()
            for i in range(2, len(v)):
                add_ali = v[i]
                ext_ali = os.path.join(database_env['TMPDIR'], '%s_v%d.fasta' % (k, i-1))
                ali_fasta_tmp = os.path.join(database_env['TMPDIR'], '%s_v%d.fasta' % (k, i))
                database_env.MafftAdd(ali_fasta_tmp, [add_ali, ext_ali])
            ali_fasta_uniq = os.path.join(database_env['ALIGNDIR'], os.path.basename(ali_fasta_tmp))
            ali_stock_uniq = os.path.splitext(ali_fasta_uniq)[0] + '.stockholm'

            #Get FASTA alignment with unique headers
            database_env.FastaUniq(ali_fasta_uniq, ali_fasta_tmp)
            #Convert FASTA aligment to Stockholm format
            database_env.MSAFormat(ali_stock_uniq, ali_fasta_uniq)
            msa_pathfile.write(os.path.abspath(ali_fasta_uniq) + '\n' + os.path.abspath(ali_stock_uniq) + '\n')

            #Build the HMM
            hmm_out = os.path.join(database_env['HMMDIR'], os.path.splitext(os.path.basename(ali_stock_uniq))[0] + '.hmm')
            database_env.Command(hmm_out, ali_stock_uniq, hmmbuild_action)
            hmm_pathfile.write(os.path.abspath(hmm_out) + '\n')
    else:
        pass
hmm_pathfile.close()
msa_pathfile.close()
Command(None, Glob(os.path.join(database_env['TMPDIR'], '*.fasta')), Delete('$SOURCES'))
