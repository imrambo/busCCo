"""
Mine CRISPR arrays.
-------------------------------------------------------------------------------
Ian Rambo
Thirteen... that's a mighty unlucky number... for somebody!
"""

import os
import PROGRAM_OPTIONS
#------------------------------------------------------------------------------
Import('pipeline_env')
#------------------------------------------------------------------------------
#Mine CRISPRs with MinCED
minced_optstring = PROGRAM_OPTIONS.optstring_join(PROGRAM_OPTIONS.minced_opts)

minced_output = [os.path.join(pipeline_env['MINCED'], f % pipeline_env['FASTAID']) for f in ['%s_crisprs.gff', '%s_spacers.fna']]
pipeline_env.Replace(MINCED_OUT=minced_output)

minced_action = 'minced %s -gffFull -spacers $SOURCE $TARGET' % minced_optstring

Command(minced_output, pipeline_env['FASTA'], minced_action)
#------------------------------------------------------------------------------
#Mine CRISPRs with PilerCR
pilercr_optstring = PROGRAM_OPTIONS.optstring_join(PROGRAM_OPTIONS.pilercr_opts)

pilercr_output = [os.path.join(pipeline_env['PILERCR'], f % pipeline_env['FASTAID']) for f in ['%s_pilercr_report.txt', '%s_pilercr_consensus.fna']]
pipeline_env.Replace(PILERCR_OUT=pilercr_output)

pilercr_action = 'pilercr %s -quiet -trimseqs -in $SOURCE -out ${TARGETS[0]} -seq ${TARGETS[1]}' % pilercr_optstring

Command(pilercr_output, pipeline_env['FASTA'], pilercr_action)

#Convert PilerCR report to GFF3
pilercr_gff = os.path.join(pipeline_env['PILERCR'], '%s_pilercr_report.gff' % pipeline_env['FASTAID'])
pipeline_env.Pilercr2GFF(pilercr_gff, Glob(os.path.join(pipeline_env['PILERCR'], '*_pilercr_report.txt')))
#------------------------------------------------------------------------------
#Extract CRISPR repeats from MinCED GFF3
minced_gff = [m for m in minced_output if m.endswith('.gff')][0]
minced_repeat_fasta = os.path.join(pipeline_env['MINCED'], pipeline_env['FASTAID'] + '_repeats.fna')

pipeline_env.MincedGFF2FASTA(minced_repeat_fasta, minced_gff)
#------------------------------------------------------------------------------
#Concatenate CRISPR repeat FASTA files from MinCED and PilerCR
pilercr_repeat_fasta = [p for p in pilercr_output if p.endswith('.fna')][0]
cat_repeat_fasta = os.path.join(pipeline_env['OUTROOT'], 'crispr/%s_minced_pilercr_repeats.fna' % pipeline_env['FASTAID'])

Command(cat_repeat_fasta, [minced_repeat_fasta, pilercr_repeat_fasta], 'cat $SOURCES > $TARGET')

#Concatenate the GFF3 files for MinCED and PilerCR
cat_crispr_gff =  os.path.join(pipeline_env['OUTROOT'], 'crispr/%s_crispr.gff' % pipeline_env['FASTAID'])
Command(cat_crispr_gff, [minced_gff, pilercr_gff], 'cat $SOURCES > $TARGET')

pipeline_env.Replace(CRISPR_GFF=cat_crispr_gff)
#------------------------------------------------------------------------------
#BLASTN concatenated CRISPR repeats against CRISPR repeat database
crispr_db_symlink = os.path.join(pipeline_env['SRCDIR'], 'DRCRISPR.fna')
PROGRAM_OPTIONS.blastn_opts['-db'] = crispr_db_symlink

blastn_optstring = PROGRAM_OPTIONS.optstring_join(PROGRAM_OPTIONS.blastn_opts)

blastn_action = 'blastn %s' % blastn_optstring

blastn_output = os.path.join(pipeline_env['OUTROOT'], 'crispr/%s_CRISPR_repeat_blastn.txt' % pipeline_env['FASTAID'])

Command(blastn_output, cat_repeat_fasta, blastn_action)
#------------------------------------------------------------------------------
#Get the best hits from BLASTN results
blastn_besthit = os.path.join(pipeline_env['OUTROOT'], 'crispr/%s_CRISPR_repeat_blastn_besthit.txt' % pipeline_env['FASTAID'])
pipeline_env.BlastBestHit(blastn_besthit, blastn_output)
#------------------------------------------------------------------------------
