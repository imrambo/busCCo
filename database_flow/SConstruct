"""
-------------------------------------------------------------------------------
Ian Rambo
Thirteen... that's a mighty unlucky number... for somebody!
"""
#==============================================================================
Help("""
-------------------------------------------------------------------------------
busCCo v1.0.0
Ian Maguire Rambo
-------------------------------------------------------------------------------
Database Flow
Usage: 'scons-3.0.1 --db_out=</path/to/database/output> --msa_dir=</path/to/msa/directory> --build_tree=<0/1> --tree_prog=<raxml/fastree>'

Purpose: Merge Multiple Sequence Alignments and build Hidden Markov Models.
Build phylogenetic trees from Multiple Sequence Alignments (optional).

You can specify whether you want to build trees with the --build_tree flag.
Set to 0 (build trees; default) or 1 (build trees).
If using --build_tree, you must also specify --tree_prog 'raxml' or 'fasttree'.

The parameters used for command line tool options can be adjusted in
scripts/PROGRAM_OPTIONS.py . These are vanilla Python dictionaries. If an
option does not have a value, use a blank string '' .
""", append = True)

#==============================================================================
EnsurePythonVersion(3, 0)
EnsureSConsVersion(3, 0, 1)

import pickle
import os
import re
import warnings
import sys

#Path for scripts
sys.path.insert(0, os.path.abspath('../scripts'))

import PROGRAM_OPTIONS
import alignment
#==============================================================================
###---Command line options
AddOption('--db_out', dest='db_out', type='string', nargs=1,
action='store', help='root database output directory', default = '.')

AddOption('--msa_dir', dest = 'msa_dir', type = 'string', nargs = 1,
action = 'store', help = 'root directory containing input multiple sequence alignments',
default = '.')

AddOption('--build_tree', dest='treeflag', type='int', nargs=1,
action='store', default=0,
help='build trees of MSAs with RAxML. State 1 or 0; Default = 0.')

AddOption('--tree_prog', dest='treeprog', type='string', nargs=1,
action = 'store', default='',
help='program for phylogenetic trees. Choose "raxml" or "fasttree". Only used if --build_tree == 1.')
#==============================================================================
###---Set environment
database_env = Environment(SRCDIR=os.path.abspath('../src'),
MSACURDIR = GetOption('msa_dir'),
DBDIR = GetOption('db_out'),
SCRIPTS = os.path.abspath('../scripts'),
TREEFLAG = GetOption('treeflag'),
TREEPROG = GetOption('treeprog'))

#MSACURDIR = os.path.abspath(GetOption('msa_dir')),
#DBDIR = os.path.abspath(GetOption('db_outdir')),

database_env.Replace(CASTBL = os.path.join(database_env['SRCDIR'], 'CasProfilesMaster.txt'),
#HMMDIR = os.path.join(database_env['DBDIR'], 'gene/hmm'),
#ALIGNDIR = os.path.join(database_env['DBDIR'], 'gene/msa'),
HMMDIR = os.path.join(database_env['SRCDIR'], 'gene/hmm'),
ALIGNDIR = os.path.join(database_env['SRCDIR'], 'gene/msa'),
TMPDIR = os.path.abspath('../tmp'),
CRISPRDB = os.path.join(database_env['SRCDIR'], 'DirectRepCRISPR.fna'),
TREEDIR = os.path.join(database_env['DBDIR'], 'trees'))

VariantDir(database_env['TMPDIR'], database_env['MSACURDIR'], duplicate = 0)
VariantDir(database_env['ALIGNDIR'], database_env['TMPDIR'], duplicate = 0)
VariantDir(database_env['HMMDIR'], database_env['ALIGNDIR'], duplicate = 0)
#==============================================================================
###---Actions and Builders---###
#==============================================================================
#Keep only unique sequences in a FASTA file
fasta_uniqseq_action = (r"sed -e '/^>/s/$/@/' -e 's/^>/#/' $SOURCE | "
r"tr -d '\n' | "
r'tr "#" "\n" | '
r'tr "@" " " | '
r"sort -u -t' ' -f -k 2,2 | "
r"sed '1d' | "
r"sed -e 's/^/>/' -e 's/ /\n/' | "
r'tr " " "\n" > $TARGET')
fasta_uniqseq_build = Builder(action = fasta_uniqseq_action)
#------------------------------------------------------------------------------
#Options for MAFFT builders
mafft_optstring = PROGRAM_OPTIONS.optstring_join(PROGRAM_OPTIONS.mafft_opts)
#------------------------------------------------------------------------------
"""
MAFFT --merge builder.
Merge two or more sub MSAs into a single MSA.
Sub MSAs are assumed to be phylogenetically separated from each other.
$SOURCES are the subMSA table and concatenated input alignment.
"""
mafft_merge_action = 'mafft %s --merge $SOURCES > $TARGET' % mafft_optstring
mafft_merge_build = Builder(action = mafft_merge_action)
#------------------------------------------------------------------------------
#Builder to create an MSA merge table for MAFFT merge
msa_table_build = Builder(action = alignment.msa_merge_table)
#------------------------------------------------------------------------------
"""
MAFFT --addprofile builder.
Add aligned sequences (profile) into an existing alignment.
Alignments must be in multi-FASTA format.
Aligned sequences (${SOURCES[0]}) to add must form a monophyletic cluster.
The existing alignment (${SOURCES[1]}) must form a paraphyletic or monophyletic cluster.
"""
mafft_addprofile_action = 'mafft %s --addprofile ${SOURCES[0]} ${SOURCES[1]} > $TARGET' % mafft_optstring
mafft_addprofile_build = Builder(action = mafft_addprofile_action)
#------------------------------------------------------------------------------
"""
MAFFT --add builder.
${SOURCES[0]} are the sequences/MSA to add to the existing MSA
SOURCES[1] is the existing MSA
TARGET is the new MSA
"""
mafft_add_action = 'mafft %s --add ${SOURCES[0]} ${SOURCES[1]} > $TARGET' % mafft_optstring
mafft_add_build = Builder(action = mafft_add_action)
#------------------------------------------------------------------------------
"""
MUSCLE profile-profile alignment builder.
"""
muscle_pp_optstring = PROGRAM_OPTIONS.optstring_join(PROGRAM_OPTIONS.muscle_pp_opts)

muscle_profile_action = 'muscle %s' % muscle_pp_optstring
muscle_profile_build = Builder(action = muscle_profile_action)
#------------------------------------------------------------------------------
#Builder for ML trees with FastTree
fasttree_optstring = PROGRAM_OPTIONS.optstring_join(PROGRAM_OPTIONS.fasttree_opts)
fasttree_action = 'fasttree %s $SOURCE > ${TARGETS[1]}' % fasttree_optstring
fasttree_build = Builder(action = fasttree_action)
#------------------------------------------------------------------------------
#Build a FASTA file with duplicate headers marked with an identifier
fasta_unique_header_build = Builder(action = 'python %s/fasta_unique_header.py --input $SOURCE --output $TARGET' % database_env['SCRIPTS'])
#------------------------------------------------------------------------------
#Create builders dictionary and append to environment
builders = {'MafftMerge':mafft_merge_build, 'MSATbl':msa_table_build,
'MafftAddProfile':mafft_addprofile_build, 'MafftAdd':mafft_add_build,
'MusclePP':muscle_profile_build, 'FastaUniqHeader':fasta_unique_header_build,
'FastaUniqSeq':fasta_uniqseq_build, 'FastTree':fasttree_build}

database_env.Append(BUILDERS = builders)
#------------------------------------------------------------------------------
SConscript(['protein/SConscript', 'crispr/SConscript'], exports = 'database_env')

#Export('database_env')
