Import('gene_env')
Import('pipeline_env')
import os
import re
from Bio import SeqIO
import pickle
"""
Search profiles(s) against a sequence database with hmmsearch
-------------------------------------------------------------------------------
Ian Rambo
Last updated: 2018-12-11
Thirteen... that's a mighty unlucky number... for somebody!
"""
#------------------------------------------------------------------------------
#Add hmmsearch options dictionary to the environment.
#Evalues are for initial pass
hmmsearch_opts = {'--domE':10, '-E':10, '--incE':1e-6, '--incdomE':1e-6, '--seed':4}
gene_env.Replace(HMMSEARCHOPTS=hmmsearch_opts)

hmmsearch_optstring = ' '.join([str(key) + ' ' + str(value) for key, value in gene_env['HMMSEARCHOPTS'].items()])
hmmsearch_action = 'hmmsearch %s --domtblout ${TARGETS[0]} --tblout ${TARGETS[1]} -o ${TARGETS[2]} $SOURCES' % hmmsearch_optstring

gene_env.Replace(HS_CAS1INIT=os.path.join(gene_env['HMMSEARCH'], 'cas1_init'))
#------------------------------------------------------------------------------
###---Initial Cas1 hmmsearch to find island anchor---###
VariantDir(gene_env['HS_CAS1INIT'], [gene_env['PRODIGAL'], pipeline_env['SRCDIR']], duplicate = 0)

hmmpaths = []
with open(os.path.join(pipeline_env['SRCDIR'], 'hmm_paths.txt'), 'r') as hpaths:
    for h in hpaths:
        h = h.rstrip()
        hmmpaths.append(h)

cas1_hmm_paths = list(set([x for x in hmmpaths if re.match(r'cas1--', os.path.basename(x))]))
for c in cas1_hmm_paths:
    cid = os.path.splitext(os.path.basename(c))[0]
    cas1_output = [os.path.join(gene_env['HS_CAS1INIT'], cid + i) for i in ['.domtbl', '.tbl', '.txt']]
    Command(cas1_output, [c, gene_env['PRODIGALOPTS']['-a']], hmmsearch_action)

#gather significant hits into a single table
cas1_domtbl_hits = os.path.join(gene_env['HS_CAS1INIT'], 'cas1_init_domhits.txt')
#gethit_action = "grep -hve '^\#' $SOURCES | awk '$7 <= %f && $13 <= %f' > $TARGET" % (gene_env['HMMSEARCHOPTS']['--incE'], gene_env['HMMSEARCHOPTS']['--incdomE'])
gethit_action = "grep -hve '^\#' $SOURCES > $TARGET"
Command(cas1_domtbl_hits, Glob(os.path.join(gene_env['HS_CAS1INIT'], '*.domtbl')), gethit_action)
#------------------------------------------------------------------------------
cas1_hit_pickle = os.path.join(gene_env['HS_CAS1INIT'], 'cas1_init_dict.p')
Depends(cas1_hit_pickle, cas1_domtbl_hits)
Command(cas1_hit_pickle, cas1_domtbl_hits, 'python %s/hmmsearch_domtbl_dict.py --input $SOURCE --output $TARGET' % os.getcwd())

if os.path.exists(cas1_domtbl_hits) and os.path.getsize(cas1_domtbl_hits) > 0:
    pipeline_env.Replace(CAS1=1) ###-pipeline flag for island anchor; use Cas1
    cas1_hit_dict = pickle.load( open( cas1_hit_pickle, 'rb' ) )
    amino_seq_dict = SeqIO.to_dict(SeqIO.parse(os.path.abspath(gene_env['PRODIGALOPTS']['-a']), 'fasta'))
    #Write the amino acid sequences for hits to FASTA files in TMPDIR
    for key, subdict in cas1_hit_dict.items():
        tmp_faa = os.path.join(pipeline_env['TMPDIR'], '%s_%s.faa' % (pipeline_env['FASTAID'], key))
        with open(tmp_faa, 'w') as tfa:
            seq_objs = [amino_seq_dict[v] for v in subdict['target_ids']]
            SeqIO.write(seq_objs, tfa, 'fasta')
        cas1_hit_dict[key]['tmp_faa'] = os.path.abspath(tmp_faa)
        cas1_hit_dict[key]['hmm_path'] = [os.path.abspath(x) for x in cas1_hmm_paths if key in os.path.basename(x)][0]
    gene_env.Replace(HS_CAS1INIT_DICT=cas1_hit_dict)
else:
    pass

#------------------------------------------------------------------------------
Export(['gene_env', 'pipeline_env'])
#------------------------------------------------------------------------------
###---BONEYARD---###
# def domtbl_seqs_build(targets, sources, env):
#     #targets = [pickle, tmp_faa]
#     #sources = [cas1_domtbl_hits, gene_env['PRODIGALOPTS']['-a']]
#     if not os.stat(sources[0]).st_size == 0:
#         domtbl_dict = parse_domtbl(sources[0])
#         pickle_dump(pickle_out = targets[1], object = domtbl_dict)
#         pipeline_env.Replace(CAS1=1)
#         amino_seq_dict = SeqIO.to_dict(SeqIO.parse(sources[1], 'fasta'))
#         for key, subdict in domtbl_dict.items():
#             tmp_faa = os.path.join(pipeline_env['TMPDIR'], '%s_%s.faa' % (pipeline_env['FASTAID'], key))
#             with open(tmp_faa, 'w') as tfa:
#                 seq_objs = [amino_seq_dict[v] for v in subdict['target_ids']]
#                 SeqIO.write(seq_objs, tfa, 'fasta')
#             domtbl_dict[key]['tmp_faa'] = os.path.abspath(tmp_faa)
#             domtbl_dict[key]['hmm_path'] = [os.path.abspath(x) for x in cas1_hmm_paths if key in os.path.basename(x)][0]
#         gene_env.Replace(HS_CAS1INIT_DICT = domtbl_dict)
#
#     else:
#         pass
#     return None
# domtbl_seqs_builder = Builder(action = domtbl_seqs_build)
# gene_env['BUILDERS']['DOMTBL'] = domtbl_seqs_builder
#
# gene_env.DOMTBL([os.path.join(gene_env['HS_CAS1INIT'], 'cas1_init_dict.p'), []], [])
